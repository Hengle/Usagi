# Usagi Engine, Copyright Â© Vitei, Inc. 2013
#!/usr/bin/env ruby
#generate_build_id.rb
#Generates a unique build ID based on the checked out git commit and hostname

require 'optparse'
require 'socket'
require 'zlib'

##################
# option parsing #
##################

options = {:prefix => 'USAGI', :region => 'JP'}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} output_file"

  opts.on('-p', '--prefix name', 'Prefix to append to constants and include guards') do |prefix|
    options[:prefix] = prefix.upcase
  end

  opts.on('-r', '--region name', 'Specify region such as JP(default), US, EU') do |prefix|
    options[:region] = prefix.upcase
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

option_parser.parse!

##################
# functions      #
##################

def split_string(str, index)
  [str[0..index-1], str[index..-1]]
end

def is_ref(str)
  prefix, _ = split_string str, 5
  prefix == "ref: "
end

def get_sha1_from_ref(str)
  _, ref = split_string str, 5
  ref_filename = ".git/" + ref
  if File.exist?(ref_filename)
  	File.open(ref_filename, "r") { |f| f.read.strip }
  else
  	ref
  end
end

##################
# main body      #
##################
HEAD_FILE = ".git/HEAD"

if File.exists? HEAD_FILE
  HEAD_CONTENT = File.open(HEAD_FILE, "r") { |f| f.read.strip }
  COMMIT_SHA1 = is_ref(HEAD_CONTENT) ? get_sha1_from_ref(HEAD_CONTENT) : HEAD_CONTENT
else
  COMMIT_SHA1 = ''
end

BUILD_HOST   = Socket.gethostname

UNIQUE_ID    = Zlib.crc32(COMMIT_SHA1 + BUILD_HOST)

OUTPUT = ARGV[0] ? File.open(ARGV[0], "w") : STDOUT

OUTPUT.puts <<-EOF
// This file is autogenerated by #{$0}
// Do not edit!

#ifndef __#{options[:prefix]}_BUILD_ID_H
#define __#{options[:prefix]}_BUILD_ID_H

#include "Engine/Common/Common.h"
#include "Engine/System/Localization.pb.h"

namespace usg {

// #{options[:prefix]}_BUILD_ID is generated by concatenating #{options[:prefix]}_COMMIT_SHA1
// and #{options[:prefix]}_BUILD_HOST, and then taking the CRC32 of the result.
static const uint32 #{options[:prefix]}_BUILD_ID          = 0x#{UNIQUE_ID.to_s(16)};

static const char #{options[:prefix]}_BUILD_REGION[]        = "#{options[:region]}";
static const char #{options[:prefix]}_BUILD_HOST[]        = "#{BUILD_HOST}";
static const char #{options[:prefix]}_COMMIT_SHA1[]       = "#{COMMIT_SHA1}";
static const char #{options[:prefix]}_COMMIT_SHA1_SHORT[] = "#{COMMIT_SHA1[0..6]}";

}

#endif //__#{options[:prefix]}_BUILD_ID_H
EOF

OUTPUT.close if ARGV[0]
